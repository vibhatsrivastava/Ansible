---
- name: Check and Install Replication feature
  ansible.windows.win_shell: |
    # Define the SQL Server instance
    $serverInstance = "{{ ServerInstance }}"  # Change to your server name if needed
    $logFile = 
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    
    # Function to log messages
    function Log-Message {
        param([string]$message)
        Add-Content -Path $logFile -Value "$timestamp - $message"
        Write-Host $message
    }

    # Define the query to check replication installation
    $query = @"
    EXEC master.dbo.xp_instance_regread 
        N'HKEY_LOCAL_MACHINE', 
        N'SOFTWARE\Microsoft\MSSQLServer\Replication', 
        N'Installed';
    "@

    # Run the query using Invoke-SqlCmd
    try {
        $result = Invoke-SqlCmd -TrustServerCertificate -ServerInstance '{{ ServerInstance }}' -Query $query -ErrorAction Stop

        if ($result -and $result.Installed -eq 1) {
            Write-Host "Replication Services are installed on '{{ ServerInstance }}'."
        } else {
            Write-Host "Replication Services are NOT installed on '{{ ServerInstance }}'."
        }
    }
    catch {
        Write-Host "Could not determine replication status. Error: $($_.Exception.Message)"
    }

    # Enable SQL Server Replication feature - assuming replication can be enabled via sp_configure

    $enableQuery = @"
    EXEC sp_configure 'show advanced options', 1;
    RECONFIGURE;
    EXEC sp_configure 'SQL Server Replication', 1;
    RECONFIGURE;
    "@

    try
    {
      Invoke-SqlCmd -TrustServerCertificate -ServerInstance $serverInstance -Query $enableQuery -ErrorAction Stop
      Log-Message "Replication Services have been enabled on $serverInstance."
    }
    catch
    {
      Log-Message "Failed to enable replication. Error: $($_.Exception.Message)"
    }

